# -*- coding: utf-8 -*-
import os
import subprocess
import sys
import datetime
# Form implementation generated from reading ui file 'P3DS.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
from PyQt5 import QtCore, QtGui, QtWidgets
from qfluentwidgets import EditableComboBox, PrimaryPushButton, PushButton, TextEdit
from Learn_Pyqt5.PlayGround.P3DS_tools.CONSTANTS import *


CodeFont = QtGui.QFont()
CodeFont.setFamily("Jetbrains Mono")
CodeFont.setPointSize(12)
CodeFont.setBold(False)
CodeFont.setWeight(50)

TextFont = QtGui.QFont()
TextFont.setFamily("得意黑")
TextFont.setPointSize(15)
TextFont.setBold(True)
TextFont.setWeight(75)
class Ui_P3DS_Launcher(object):
    def setupUi(self, P3DS_Launcher):
        P3DS_Launcher.setObjectName("P3DS_Launcher")
        P3DS_Launcher.resize(1500, 550)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(P3DS_Launcher)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.GB_Compile = QtWidgets.QGroupBox(P3DS_Launcher)
        self.GB_Compile.setTitle("")
        self.GB_Compile.setObjectName("GB_Compile")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.GB_Compile)
        self.verticalLayout.setObjectName("verticalLayout")
        self.GB_Launch = QtWidgets.QGroupBox(self.GB_Compile)
        self.GB_Launch.setObjectName("GB_Launch")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.GB_Launch)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.ECB_Choice = EditableComboBox(self.GB_Launch)
        self.ECB_Choice.setObjectName("ECB_Choice")
        self.ECB_Choice.setFont(font)
        self.ECB_Choice.setMinimumWidth(250)
        self.ECB_Choice.addItem("Version 1208")
        self.ECB_Choice.addItem("Version 1209")
        self.ECB_Choice.addItem("Version 1210")
        self.ECB_Choice.setFixedHeight(50)
        self.horizontalLayout_3.addWidget(self.ECB_Choice)
        self.PB_Launch = PrimaryPushButton(self.GB_Launch)
        self.PB_Launch.setFixedWidth(150)
        self.PB_Launch.setFont(font)
        self.PB_Launch.setObjectName("PB_Launch")
        self.horizontalLayout_3.addWidget(self.PB_Launch)
        self.verticalLayout.addWidget(self.GB_Launch)
        self.PB_Clear_Output = PushButton(self.GB_Compile)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.PB_Clear_Output.setFont(font)
        self.PB_Clear_Output.setObjectName("PB_Clear_Output")
        self.verticalLayout.addWidget(self.PB_Clear_Output)
        self.GB_Check = QtWidgets.QGroupBox(self.GB_Compile)
        self.GB_Check.setObjectName("GB_Check")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.GB_Check)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.CB_Compile_OC = QtWidgets.QCheckBox(self.GB_Check)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        #font.setKerning(True)
        self.CB_Compile_OC.setFont(font)
        self.CB_Compile_OC.setObjectName("CB_Compile_OC")
        self.CB_Compile_OC.setChecked(True)
        self.horizontalLayout.addWidget(self.CB_Compile_OC)
        spacerItem = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.CB_Move = QtWidgets.QCheckBox(self.GB_Check)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.CB_Move.setFont(font)
        self.CB_Move.setObjectName("CB_Move")
        self.CB_Move.setChecked(True)
        self.horizontalLayout.addWidget(self.CB_Move)
        spacerItem1 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.CB_Launch = QtWidgets.QCheckBox(self.GB_Check)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.CB_Launch.setFont(font)
        self.CB_Launch.setObjectName("CB_Launch")
        self.horizontalLayout.addWidget(self.CB_Launch)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.verticalLayout.addWidget(self.GB_Check)
        spacerItem3 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem3)
        self.PB_Process = PrimaryPushButton(self.GB_Compile)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.PB_Process.setFont(font)
        self.PB_Process.setObjectName("PB_Process")
        self.verticalLayout.addWidget(self.PB_Process)
        self.PB_Compile_All = PushButton(self.GB_Compile)
        font = QtGui.QFont()
        font.setFamily("得意黑")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.PB_Compile_All.setFont(font)
        self.PB_Compile_All.setAutoFillBackground(False)
        self.PB_Compile_All.setObjectName("PB_Compile_All")
        self.verticalLayout.addWidget(self.PB_Compile_All)
        self.horizontalLayout_2.addWidget(self.GB_Compile)
        self.Output = TextEdit(P3DS_Launcher)
        self.Output.setObjectName("Output")
        font = QtGui.QFont()
        font.setFamily("得意黑")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.Output.setFont(font)
        self.horizontalLayout_2.addWidget(self.Output)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_2)

        self.retranslateUi(P3DS_Launcher)
        self.PB_Launch.clicked.connect(self.launch)
        self.PB_Clear_Output.clicked.connect(self.Output.clear)  # type: ignore
        self.PB_Process.clicked.connect(self.process)  # type: ignore
        self.PB_Compile_All.clicked.connect(self.compile_all)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(P3DS_Launcher)

    def retranslateUi(self, P3DS_Launcher):
        _translate = QtCore.QCoreApplication.translate
        P3DS_Launcher.setWindowTitle(_translate("P3DS_Launcher", "P3DS_Launcher"))
        self.GB_Launch.setTitle(_translate("P3DS_Launcher", "启动项"))
        self.PB_Launch.setText(_translate("P3DS_Launcher", "启动"))
        self.PB_Clear_Output.setText(_translate("P3DS_Launcher", "清空输出"))
        self.GB_Check.setTitle(_translate("P3DS_Launcher", "编译"))
        self.CB_Compile_OC.setText(_translate("P3DS_Launcher", "编译(仅C++)"))
        self.CB_Move.setText(_translate("P3DS_Launcher", "移动"))
        self.CB_Launch.setText(_translate("P3DS_Launcher", "启动"))
        self.PB_Process.setText(_translate("P3DS_Launcher", "执行"))
        self.PB_Compile_All.setText(_translate("P3DS_Launcher", "全部重新编译"))

    def launch(self):
        print(XS1_PATH)
        version = self.ECB_Choice.currentText()
        str = "Launch! "+version
        self.Output.append(str)
        #self.test()

    def process(self):

        self.Output.append("Process")
        self.compile_oc()
        self.Output.append("Process end")

    def compile_all(self):
        self.Output.append("CompileAll")

    def test(self):
        # 打开一个 cmd.exe 进程
        p = subprocess.Popen('cmd.exe', stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                             shell=True)

        # 指定多个命令
        commands = [
            "cd E:\ProfessionalSlice\Slice3r-MasterCode",  # 第一个命令
            "dir",
            #"perl P3DS.pl --gui",  # 第二个命令
        ]

        # 将多个命令拼接成一个字符串，以换行符分隔
        commands_str = "\n".join(commands)

        # 将命令字符串作为标准输入流写入进程
        p.stdin.write(commands_str.encode("gbk") + b"\n")
        p.stdin.flush()

        # 读取进程的输出结果
        output, error = p.communicate()

        # 解码并打印输出结果
        print(output.decode("gbk"))

        input("请按下回车键结束...")

    def compile_oc(self):
        CurrentPath = PATH_VERSION_1213
        Bat_Path = CurrentPath + XS_bat_PATH
        SourceDir = CurrentPath + XS1_PATH
        DestDir = CurrentPath + XS2_PATH
        #print([Bat_Path, SourceDir, DestDir])
        src_path = os.path.join(SourceDir, OBJ_DLL_NAME)
        dest_path = os.path.join(DestDir, OBJ_DLL_NAME)
        current_datetime = datetime.datetime.now()
        current_datetime_str = current_datetime.strftime('%Y-%m-%d-%H-%M-%S')
        dest_path_bak= DestDir+current_datetime_str+"-"+OBJ_DLL_NAME
        print(dest_path_bak)
        if os.path.exists(src_path):
            os.remove(src_path)
            self.Output.append("已经删除原有的dll")

        start_time = time.time()
        # 使用subprocess模块运行bat文件
        proc = subprocess.run([Bat_Path], shell=True, capture_output=True, text=True)
        end_time = time.time()
        # 计算操作的执行时间
        execution_time = end_time - start_time
        self.Output.append(f"编译dll耗时{execution_time}")
        # 获取bat文件的返回值
        returncode = proc.returncode

        # 输出bat文件的输出结果
        stdout_result = proc.stdout
        stderr_result = proc.stderr
        print("stdout:", stdout_result)
        print("stderr:", stderr_result)
        self.Output.setFont(CodeFont)
        self.Output.append(f"编译  {stdout_result}")
        self.Output.append(f"编译 error {stdout_result}")
        self.Output.setFont(TextFont)
        # 如果bat文件成功执行，移动DLL文件
        if returncode == 0:
            self.Output.append("重新生成dll")
            print([src_path,dest_path])
            if os.path.exists(src_path):
                try:
                    if os.path.exists(dest_path):
                        os.rename(dest_path, dest_path_bak)
                        self.Output.append("已经删除原有的dest_dll")
                    os.rename(src_path, dest_path)
                except Exception as e:
                    print('An error occurred:', str(e))
                self.Output.append(f"移动dll到{dest_path}")
            else:
                print('DLL file not found.')
        else:
            print('Error running bat file. Return code:', returncode)
